{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u9280\\u884C\\\\client\\\\src\\\\user-panel\\\\transaction.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './transaction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TransactionDisplay() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const userId = 2; // Assume this is the current user ID\n\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      try {\n        const response = await fetch(`http://localhost:7000/api/payment.ginkou.in/allTransaction/${userId}`);\n        const data = await response.json();\n        const combinedTransactions = [...data.creditTransactions.map(transaction => ({\n          ...transaction,\n          type: 'credit'\n        })), ...data.debitTransactions.map(transaction => ({\n          ...transaction,\n          type: 'debit'\n        })), ...data.selfTransactions.map(transaction => ({\n          ...transaction,\n          type: 'self'\n        })), ...data.failedTransactions.map(transaction => ({\n          ...transaction,\n          type: 'failed'\n        }))].sort((a, b) => new Date(b.time) - new Date(a.time));\n        setTransactions(combinedTransactions);\n      } catch (error) {\n        console.error('Error fetching transactions:', error);\n      }\n    };\n    fetchTransactions();\n  }, [userId]);\n  const getTransactionStyle = transaction => {\n    if (transaction.type === 'failed') {\n      return {\n        color: 'red'\n      }; // Red for failed transactions\n    } else if (transaction.type === 'credit') {\n      return {\n        color: 'green'\n      }; // Green for credit transactions\n    } else if (transaction.type === 'debit') {\n      return {\n        color: 'blue'\n      }; // Blue for debit transactions\n    } else if (transaction.type === 'self') {\n      return {\n        color: 'orange'\n      }; // Orange for self transactions\n    }\n    return {};\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transaction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-item\",\n      style: getTransactionStyle(transaction),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transaction-date\",\n          children: new Date(transaction.time).toLocaleDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transaction-remark\",\n          children: transaction.remark\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transaction-type\",\n        children: transaction.mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: transaction.amount.toLocaleString(undefined, {\n          style: 'currency',\n          currency: 'INR'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, `${transaction.transactionId}-${transaction.type}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(TransactionDisplay, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n_c = TransactionDisplay;\nexport default TransactionDisplay;\nvar _c;\n$RefreshReg$(_c, \"TransactionDisplay\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TransactionDisplay","_s","transactions","setTransactions","userId","fetchTransactions","response","fetch","data","json","combinedTransactions","creditTransactions","map","transaction","type","debitTransactions","selfTransactions","failedTransactions","sort","a","b","Date","time","error","console","getTransactionStyle","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","toLocaleDateString","remark","mode","amount","toLocaleString","undefined","currency","transactionId","_c","$RefreshReg$"],"sources":["D:/銀行/client/src/user-panel/transaction.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './transaction.css';\r\n\r\nfunction TransactionDisplay() {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const userId = 2; // Assume this is the current user ID\r\n\r\n  useEffect(() => {\r\n    const fetchTransactions = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:7000/api/payment.ginkou.in/allTransaction/${userId}`);\r\n        const data = await response.json();\r\n        \r\n        const combinedTransactions = [\r\n          ...data.creditTransactions.map(transaction => ({ ...transaction, type: 'credit' })),\r\n          ...data.debitTransactions.map(transaction => ({ ...transaction, type: 'debit' })),\r\n          ...data.selfTransactions.map(transaction => ({ ...transaction, type: 'self' })),\r\n          ...data.failedTransactions.map(transaction => ({ ...transaction, type: 'failed' }))\r\n        ].sort((a, b) => new Date(b.time) - new Date(a.time));\r\n\r\n        setTransactions(combinedTransactions);\r\n      } catch (error) {\r\n        console.error('Error fetching transactions:', error);\r\n      }\r\n    };\r\n\r\n    fetchTransactions();\r\n  }, [userId]);\r\n\r\n  const getTransactionStyle = (transaction) => {\r\n    if (transaction.type === 'failed') {\r\n      return { color: 'red' }; // Red for failed transactions\r\n    } else if (transaction.type === 'credit') {\r\n      return { color: 'green' }; // Green for credit transactions\r\n    } else if (transaction.type === 'debit') {\r\n      return { color: 'blue' }; // Blue for debit transactions\r\n    } else if (transaction.type === 'self') {\r\n      return { color: 'orange' }; // Orange for self transactions\r\n    }\r\n    return {};\r\n  };\r\n\r\n  return (\r\n    <div className=\"transaction-container\">\r\n      <div className=\"transaction-header\">\r\n        <span>Date</span>\r\n        <span>Type</span>\r\n        <span>Amount</span>\r\n      </div>\r\n      {transactions.map((transaction) => (\r\n        <div className=\"transaction-item\" key={`${transaction.transactionId}-${transaction.type}`} style={getTransactionStyle(transaction)}>\r\n          <div>\r\n            <div className=\"transaction-date\">\r\n              {new Date(transaction.time).toLocaleDateString()}\r\n            </div>\r\n            <div className=\"transaction-remark\">{transaction.remark}</div>\r\n          </div>\r\n          <div className=\"transaction-type\">{transaction.mode}</div>\r\n          <div>\r\n            {transaction.amount.toLocaleString(undefined, { style: 'currency', currency: 'INR' })}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransactionDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}